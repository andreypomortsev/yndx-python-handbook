name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}  # Can dynamically choose OS based on the matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install poetry
      
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies using Poetry
        run: |
          poetry install --no-root

      - name: Run Flake8 linting
        run: |
          poetry run flake8 .
  
      - name: Check Flake8 results
        if: runner.os != 'Windows'
        run: |
          flake8_exit_status=$?
          if [ $flake8_exit_status -ne 0 ]; then
            echo "Linting failed with exit status $flake8_exit_status."
            exit 1
          fi
        shell: bash
  
      - name: Check Flake8 results (Windows)
        if: runner.os == 'Windows'
        run: |
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Linting failed with exit status $LASTEXITCODE"
            exit 1
          }
        shell: pwsh

      - name: Final linting status
        run: echo "Linting passed."

      - name: Set PYTHONPATH
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PYTHONPATH=${{ github.workspace }}" >> $env:GITHUB_ENV
          else
            echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Run Pytest with Coverage report in XML
        run:
          poetry run pytest --cov-report=xml
        env:
          CI: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@79066c46f8dcdf8d7355f820dbac958c5b4cb9d3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
