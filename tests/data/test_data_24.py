a_test_data = [
    ("3\n", "1 2 3\n2 4 6\n3 6 9\n", "first open test"),
    (
        "5\n",
        "1 2 3 4 5\n"
        "2 4 6 8 10\n"
        "3 6 9 12 15\n"
        "4 8 12 16 20\n"
        "5 10 15 20 25\n",
        "second open test",
    ),
]


b_test_data = [
    (
        "3\n",
        "1 * 1 = 1\n"
        "2 * 1 = 2\n"
        "3 * 1 = 3\n"
        "1 * 2 = 2\n"
        "2 * 2 = 4\n"
        "3 * 2 = 6\n"
        "1 * 3 = 3\n"
        "2 * 3 = 6\n"
        "3 * 3 = 9\n",
        "first open test",
    ),
    (
        "5\n",
        "1 * 1 = 1\n"
        "2 * 1 = 2\n"
        "3 * 1 = 3\n"
        "4 * 1 = 4\n"
        "5 * 1 = 5\n"
        "1 * 2 = 2\n"
        "2 * 2 = 4\n"
        "3 * 2 = 6\n"
        "4 * 2 = 8\n"
        "5 * 2 = 10\n"
        "1 * 3 = 3\n"
        "2 * 3 = 6\n"
        "3 * 3 = 9\n"
        "4 * 3 = 12\n"
        "5 * 3 = 15\n"
        "1 * 4 = 4\n"
        "2 * 4 = 8\n"
        "3 * 4 = 12\n"
        "4 * 4 = 16\n"
        "5 * 4 = 20\n"
        "1 * 5 = 5\n"
        "2 * 5 = 10\n"
        "3 * 5 = 15\n"
        "4 * 5 = 20\n"
        "5 * 5 = 25\n",
        "second open test",
    ),
    ("1\n", "1 * 1 = 1\n", "min size"),
    (
        "10\n",
        "1 * 1 = 1\n"
        "2 * 1 = 2\n"
        "3 * 1 = 3\n"
        "4 * 1 = 4\n"
        "5 * 1 = 5\n"
        "6 * 1 = 6\n"
        "7 * 1 = 7\n"
        "8 * 1 = 8\n"
        "9 * 1 = 9\n"
        "10 * 1 = 10\n"
        "1 * 2 = 2\n"
        "2 * 2 = 4\n"
        "3 * 2 = 6\n"
        "4 * 2 = 8\n"
        "5 * 2 = 10\n"
        "6 * 2 = 12\n"
        "7 * 2 = 14\n"
        "8 * 2 = 16\n"
        "9 * 2 = 18\n"
        "10 * 2 = 20\n"
        "1 * 3 = 3\n"
        "2 * 3 = 6\n"
        "3 * 3 = 9\n"
        "4 * 3 = 12\n"
        "5 * 3 = 15\n"
        "6 * 3 = 18\n"
        "7 * 3 = 21\n"
        "8 * 3 = 24\n"
        "9 * 3 = 27\n"
        "10 * 3 = 30\n"
        "1 * 4 = 4\n"
        "2 * 4 = 8\n"
        "3 * 4 = 12\n"
        "4 * 4 = 16\n"
        "5 * 4 = 20\n"
        "6 * 4 = 24\n"
        "7 * 4 = 28\n"
        "8 * 4 = 32\n"
        "9 * 4 = 36\n"
        "10 * 4 = 40\n"
        "1 * 5 = 5\n"
        "2 * 5 = 10\n"
        "3 * 5 = 15\n"
        "4 * 5 = 20\n"
        "5 * 5 = 25\n"
        "6 * 5 = 30\n"
        "7 * 5 = 35\n"
        "8 * 5 = 40\n"
        "9 * 5 = 45\n"
        "10 * 5 = 50\n"
        "1 * 6 = 6\n"
        "2 * 6 = 12\n"
        "3 * 6 = 18\n"
        "4 * 6 = 24\n"
        "5 * 6 = 30\n"
        "6 * 6 = 36\n"
        "7 * 6 = 42\n"
        "8 * 6 = 48\n"
        "9 * 6 = 54\n"
        "10 * 6 = 60\n"
        "1 * 7 = 7\n"
        "2 * 7 = 14\n"
        "3 * 7 = 21\n"
        "4 * 7 = 28\n"
        "5 * 7 = 35\n"
        "6 * 7 = 42\n"
        "7 * 7 = 49\n"
        "8 * 7 = 56\n"
        "9 * 7 = 63\n"
        "10 * 7 = 70\n"
        "1 * 8 = 8\n"
        "2 * 8 = 16\n"
        "3 * 8 = 24\n"
        "4 * 8 = 32\n"
        "5 * 8 = 40\n"
        "6 * 8 = 48\n"
        "7 * 8 = 56\n"
        "8 * 8 = 64\n"
        "9 * 8 = 72\n"
        "10 * 8 = 80\n"
        "1 * 9 = 9\n"
        "2 * 9 = 18\n"
        "3 * 9 = 27\n"
        "4 * 9 = 36\n"
        "5 * 9 = 45\n"
        "6 * 9 = 54\n"
        "7 * 9 = 63\n"
        "8 * 9 = 72\n"
        "9 * 9 = 81\n"
        "10 * 9 = 90\n"
        "1 * 10 = 10\n"
        "2 * 10 = 20\n"
        "3 * 10 = 30\n"
        "4 * 10 = 40\n"
        "5 * 10 = 50\n"
        "6 * 10 = 60\n"
        "7 * 10 = 70\n"
        "8 * 10 = 80\n"
        "9 * 10 = 90\n"
        "10 * 10 = 100\n",
        "big ten",
    ),
]


c_test_data = [
    (
        "14\n",
        "1\n2 3\n4 5 6\n7 8 9 10\n11 12 13 14 ",
        "first open test",
    ),
    ("6\n", "1\n2 3\n4 5 6\n", "second open test"),
    (
        "92\n",
        "1\n"
        "2 3\n"
        "4 5 6\n"
        "7 8 9 10\n"
        "11 12 13 14 15\n"
        "16 17 18 19 20 21\n"
        "22 23 24 25 26 27 28\n"
        "29 30 31 32 33 34 35 36\n"
        "37 38 39 40 41 42 43 44 45\n"
        "46 47 48 49 50 51 52 53 54 55\n"
        "56 57 58 59 60 61 62 63 64 65 66\n"
        "67 68 69 70 71 72 73 74 75 76 77 78\n"
        "79 80 81 82 83 84 85 86 87 88 89 90 91\n"
        "92 ",
        "big tree with a trunk",
    ),
    (
        "78\n",
        "1\n"
        "2 3\n"
        "4 5 6\n"
        "7 8 9 10\n"
        "11 12 13 14 15\n"
        "16 17 18 19 20 21\n"
        "22 23 24 25 26 27 28\n"
        "29 30 31 32 33 34 35 36\n"
        "37 38 39 40 41 42 43 44 45\n"
        "46 47 48 49 50 51 52 53 54 55\n"
        "56 57 58 59 60 61 62 63 64 65 66\n"
        "67 68 69 70 71 72 73 74 75 76 77 78\n",
        "big tree without a trunk",
    ),
    ("3\n", "1\n2 3\n", "small tree without a trunk"),
    ("4\n", "1\n2 3\n4 ", "small tree with a trunk"),
]


d_test_data = [
    ("5\n1\n2\n3\n4\n5\n", "15\n", "first open test"),
    ("3\n123\n654\n789\n", "45\n", "second open test"),
    ("1\n100897089807687967800780678023\n", "149\n", "looong int one line"),
    (
        "1\n100000000000000000000000000001\n",
        "2\n",
        "looong int one line small sum",
    ),
    (
        "9\n0\n100000000000\n0\n2\n0\n0\n1\n10\n442\n",
        "15\n",
        "nine lines with zeros",
    ),
]


e_test_data = [
    (
        "3\n"
        "березка\n"
        "елочка\n"
        "зайка\n"
        "волк\n"
        "березка\n"
        "ВСЁ\n"
        "сосна\n"
        "сосна\n"
        "сосна\n"
        "елочка\n"
        "грибочки\n"
        "медведь\n"
        "ВСЁ\n"
        "сосна\n"
        "сосна\n"
        "сосна\n"
        "белочка\n"
        "сосна\n"
        "белочка\n"
        "ВСЁ\n",
        "1\n",
        "first open test",
    ),
    (
        "4\n"
        "зайка\n"
        "березка\n"
        "ВСЁ\n"
        "зайка\n"
        "зайка\n"
        "ВСЁ\n"
        "березка\n"
        "елочка\n"
        "березка\n"
        "ВСЁ\n"
        "елочка\n"
        "елочка\n"
        "елочка\n"
        "ВСЁ\n",
        "2\n",
        "second open test",
    ),
    (
        "9\n"
        "ВСЁ\n"
        "ВСЁ\n"
        "ВСЁ\n"
        "ВСЁ\n"
        "ВСЁ\n"
        "зайка\n"
        "березка\n"
        "ВСЁ\n"
        "зайка\n"
        "зайка\n"
        "ВСЁ\n"
        "березка\n"
        "елочка\n"
        "березка\n"
        "ВСЁ\n"
        "елочка\n"
        "елочка\n"
        "елочка\n"
        "ВСЁ\n",
        "2\n",
        "empty zones",
    ),
]
