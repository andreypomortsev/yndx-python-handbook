a_test_data = [
    ("world", "Hello, world!\n", "first open test"),
    ("Yandex", "Hello, Yandex!\n", "second open test"),
    ("", "Hello, !\n", "empty string"),
    (" ", "Hello,  !\n", "whitespace string"),
    ("9", "Hello, 9!\n", "digit"),
    ("89p13", "Hello, 89p13!\n", "mixed"),
]

b_test_data = [
    ((12, 45), 3, "first open test"),
    ((144, 96), 48, "second open test"),
    ((13, 29), 1, "small co-prime"),
    ((48, 18), 6, "a > b"),
    ((18, 48), 6, "a < b"),
    ((7, 7), 7, "the same prime"),
    ((100, 100), 100, "the same non prime"),
    ((12**21, 13**23), 1, "huge co-prime numbers"),
]

c_test_data = [
    (12345, 5, "first open test"),
    (-100500, 6, "second open test"),
    (10**82, 83, "long int"),
    (-1 * 10**82, 83, "negative long int"),
    (0, 1, "zero"),
    (1, 1, "one"),
    (10**882, 883, "long long int"),
]

d_test_data = [
    ((1, "en"), "January", "first open test"),
    ((7, "ru"), "Июль", "second open test"),
    ((2, "en"), "February", "february_en"),
    ((3, "en"), "March", "march_en"),
    ((4, "en"), "April", "april_en"),
    ((5, "en"), "May", "may_en"),
    ((6, "en"), "June", "june_en"),
    ((8, "en"), "August", "august_en"),
    ((9, "en"), "September", "september_en"),
    ((10, "en"), "October", "october_en"),
    ((11, "en"), "November", "november_en"),
    ((12, "en"), "December", "december_en"),
    ((0, "en"), "", "empty_en"),
    ((0, "ru"), "", "empty_ru"),
    ((2, "ru"), "Февраль", "fevral_ru"),
    ((3, "ru"), "Март", "mart_ru"),
    ((4, "ru"), "Апрель", "aprel_ru"),
    ((5, "ru"), "Май", "may_ru"),
    ((6, "ru"), "Июнь", "iyun_ru"),
    ((8, "ru"), "Август", "avgust_ru"),
    ((9, "ru"), "Сентябрь", "sentabr_ru"),
    ((10, "ru"), "Октябрь", "oktyabr_ru"),
    ((11, "ru"), "Ноябрь", "noyabr_ru"),
    ((12, "ru"), "Декабрь", "dekabr_ru"),
    (("2", "en"), "February", "february_en_string"),
    (("3", "en"), "March", "march_en_string"),
    (("4", "en"), "April", "april_en_string"),
    (("5", "en"), "May", "may_en_string"),
    (("6", "en"), "June", "june_en_string"),
    (("8", "en"), "August", "august_en_string"),
    (("9", "en"), "September", "september_en_string"),
    (("10", "en"), "October", "october_en_string"),
    (("11", "en"), "November", "november_en_string"),
    (("12", "en"), "December", "december_en_string"),
    (("2", "ru"), "Февраль", "fevral_ru_string"),
    (("3", "ru"), "Март", "mart_ru_string"),
    (("4", "ru"), "Апрель", "aprel_ru_string"),
    (("5", "ru"), "Май", "may_ru_string"),
    (("6", "ru"), "Июнь", "iyun_ru_string"),
    (("8", "ru"), "Август", "avgust_ru_string"),
    (("9", "ru"), "Сентябрь", "sentabr_ru_string"),
    (("10", "ru"), "Октябрь", "oktyabr_ru_string"),
    (("11", "ru"), "Ноябрь", "noyabr_ru_string"),
    (("12", "ru"), "Декабрь", "dekabr_ru_string"),
]

e_test_data = [
    ("1 2 3 4 5", (1, 2, 3, 4, 5), "first open test"),
    ("1 -2 3 -4 5", (1, -2, 3, -4, 5), "second open test"),
    ("1 1 1 1 1 1", (1, 1, 1, 1, 1, 1), "the same numbers"),
    ("0", (0,), "one number"),
    ("0 " * 10**5, tuple(map(int, str.split("0 " * 10**5))), "big line"),
    (
        "-99 " * 10**5,
        tuple(map(int, str.split("-99 " * 10**5))),
        "big negative line",
    ),
]

f_test_data = [
    (
        ("Hello!", "Hello!", "How do you do?", "Hello!"),
        "Hello!\nHow do you do?\n",
        "first open test",
    ),
    (
        (
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
        ),
        "Ало!\nЯ тебя не слышу\nПозвони когда сможешь\n",
        "second open test",
    ),
    (
        (
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Ало!",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Я тебя не слышу",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
            "Ало!",
            "Ало!",
            "Позвони когда сможешь",
            "Позвони когда сможешь",
            "Я тебя не слышу",
        ),
        "Ало!\nЯ тебя не слышу\nПозвони когда сможешь\n",
        "second open test max-mode",
    ),
]

g_test_data = [
    (((2, 1), (4, 2)), True, "first open test"),
    (((5, 5), (6, 6)), False, "second open test"),
    (
        ((21231415, 3312421321325), (64213132421, 6641231654)),
        False,
        "random numbers",
    ),
    (((1, 5), (2, 8)), False, "one"),
    (((5, 5), (6, 7)), True, "capture one"),
    (((5, 5), (6, 3)), True, "capture two"),
    (((5, 5), (7, 6)), True, "capture three"),
    (((5, 5), (3, 6)), True, "capture four"),
]

h_test_data = [
    (123, False, "first open test"),
    ([1, 2, 1, 2, 1], True, "second open test"),
    ([1, 2, 1, 2, 1, 212], False, "List[int]"),
    ((1, 2, 1, 2, 1), True, "Tuple[int] true"),
    ((1, 2, 1, 2, 1, 99), False, "Tuple[int] false"),
    (["1", "2", "1", "2", "1"], True, "List[str] true"),
    (["1", "2", "1", "2", "1", "212"], False, "List[str] false"),
    (("1", "2", "1", "2", "1"), True, "Tuple[int] true"),
    (("1", "2", "1", "2", "1", "99"), False, "Tuple[str] false"),
    ("RaCecAr", True, "racecar string camel"),
    (["R", "a", "c", "E", "C", "a", "r"], True, "racecar list"),
    (("R", "a", "c", "E", "C", "a", "r"), True, "racecar tuple"),
    ("RaCecArs", False, "racecars string camel"),
    (["RaCecArs"], True, "racecars List[str] one element true"),
    (("RaCecArs",), True, "racecars Tuple[str] one element true"),
    (["RaCecAr"], True, "racecars List[str] one element true"),
    (("RaCecAr",), True, "racecars Tuple[str] one element true"),
    ((123454321,), True, "Tuple[int] one number true"),
    ((123454321, 123454321), True, "Tuple[int] true"),
    ((123454321, 1234543212), False, "Tuple[int] true"),
    ((-123454321,), True, "Tuple[-int] true"),
    ([-123454321], True, "List[-int] true"),
    (-123454321, False, "-int false"),
]

i_test_data = [
    (1001459, True, "first open test"),
    (79701, False, "second open test"),
    (1, False, "one"),
    (2, True, "small prime 2"),
    (3, True, "small prime 3"),
    (5, True, "small prime 5"),
    (10**9, False, "big even number"),
    (10000000019, True, "big prime"),
    (25, False, "odd number"),
]

j_test_data = [
    (((1, 2), (3, 4, 5)), (1, 2, 3, 4, 5), "first open test"),
    (((7, 12), (1, 9, 50)), (1, 7, 9, 12, 50), "second open test"),
    (((1, 2, 3), (4, 5)), (1, 2, 3, 4, 5), "first longer"),
    (
        ((7, 12, 13, 49), (1, 9, 50)),
        (1, 7, 9, 12, 13, 49, 50),
        "first longer mix",
    ),
    (
        ((7, 12, 13, 49), (1, 4, 9, 50)),
        (1, 4, 7, 9, 12, 13, 49, 50),
        "same length",
    ),
    (((1, 2, 3), (4, 5, 6)), (1, 2, 3, 4, 5, 6), "same length decreasing"),
    (((-3, -2, -1), (0,)), (-3, -2, -1, 0), "negative numbers and one lement"),
    (((0,), (-3, -2, -1)), (-3, -2, -1, 0), "one lement and negative numbers"),
    (
        ((0, 100, 2000, 3000), (-3, -2, -1, 30001)),
        (-3, -2, -1, 0, 100, 2000, 3000, 30001),
        "mix of numbers",
    ),
    (
        (tuple(range(10**4)), tuple(range(10**4))),
        tuple(sorted(list(range(10**4)) + list(range(10**4)))),
        "the same tuples",
    ),
]
