from tests.data.test_data_41 import d_test_data as d_test_data_41

a_test_data = [
    ((3,), [0, 0, 0], "first open test"),
    ((5, 1), [1, 1, 1, 1, 1], "second open test"),
    ((1, 5), [5], "single value"),
    ((5, 5), [5, 5, 5, 5, 5], "double value"),
    ((1,), [0], "one default value"),
    ((1, 290293843), [290293843], "one and big value"),
]

b_test_data = [
    ((3,), [[0, 0, 0], [0, 0, 0], [0, 0, 0]], "first open test"),
    (((4, 2), 1), [[1, 1, 1, 1], [1, 1, 1, 1]], "second open test"),
    (
        (5, 1),
        [
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1],
        ],
        "five ones",
    ),
    (((3, 1), 9), [[9, 9, 9]], "one row matrix"),
    (((1, 3), 9), [[9], [9], [9]], "one column matrix"),
    (((1, 1), 9), [[9]], "one value nine"),
    (((1, 1),), [[0]], "one value default"),
    (((1, 1), 0), [[0]], "zero value"),
    (((1, 1), 1), [[1]], "one value one"),
    (((1, 1), 290293843), [[290293843]], "one and big value"),
]

c_test_data = [
    ((3,), 3, "first open test"),
    ((36, 48, 156, 100500), 12, "second open test"),
    ((3, 5, 7, 9, 17, 33), 1, "gcd of small primes"),
    ((2, 290293843, 290293847, 290293849), 1, "gcd of big primes"),
    ((290293843,), 290293843, "one big prime"),
    ((2,) * 10**5, 2, "a lot equal of numbers"),
    (tuple(range(198)), 1, "a lot of increasing numbers"),
    (tuple(range(0, 1298, 2)), 2, "a lot of even increasing numbers"),
    (tuple(range(1, 9297, 3)), 1, "a lot of odd increasing numbers"),
]

d_test_data = [
    ((1, "en"), "January", "first open test"),
    ((7,), "Июль", "second open test"),
    ((1,), "Январь", "Jan"),
    ((2,), "Февраль", "Feb"),
    ((3,), "Март", "Mar"),
    ((4,), "Апрель", "Apr"),
    ((5,), "Май", "May"),
    ((6,), "Июнь", "Jun"),
    ((8,), "Август", "Jul"),
    ((9,), "Сентябрь", "Sep"),
    ((10,), "Октябрь", "Oct"),
    ((11,), "Ноябрь", "Nov"),
    ((12,), "Декабрь", "Dec"),
] + d_test_data_41[2:]

e_test_data = [
    ((1, 2, 3), {}, "1 2 3\n", "first open test"),
    (
        [7, 3, 1, "hello", (1, 2, 3)],
        {"sep": ", ", "end": "!"},
        "7, 3, 1, hello, (1, 2, 3)!",
        "second open test",
    ),
    (("lambda x: x",), {"sep": " ", "end": "!"}, "lambda x: x!", "lambda"),
    (
        (1, 2, 3),
        {"sep": "\nlambda x: x\n", "end": "\n!!!"},
        "1\nlambda x: x\n2\nlambda x: x\n3\n!!!",
        "integers with crazy sep",
    ),
    (
        ("lambda x: x", [9, 8, 7, 6], {"one": 1, "two": 3}),
        {},
        "lambda x: x [9, 8, 7, 6] {'one': 1, 'two': 3}\n",
        "mix of data types",
    ),
]

f_test_data = [
    (
        {"coffee": 1, "milk": 2, "cream": 3},  # global in_stock
        (
            (
                "Эспрессо",
                "Капучино",
                "Макиато",
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
        )
        * 2,
        ("Эспрессо", "К сожалению, не можем предложить Вам напиток"),
        "first open test",
    ),
    (
        {"coffee": 4, "milk": 4, "cream": 0},
        (("Капучино", "Макиато", "Эспрессо"),) * 3,
        ("Капучино", "Макиато", "Эспрессо"),
        "second open test",
    ),
    (
        {"coffee": 1, "milk": 0, "cream": 1},
        (
            (
                "Капучино",
                "Макиато",
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
        ),
        ("Кон Панна",),
        "the last recipie",
    ),
    (
        {"coffee": 7, "milk": 6, "cream": 4},
        (
            (
                "Эспрессо",
                "Капучино",
                "Макиато",
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
            (
                "Капучино",
                "Макиато",
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
            (
                "Макиато",
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
            (
                "Кофе по-венски",
                "Латте Макиато",
                "Кон Панна",
            ),
            (
                "Латте Макиато",
                "Кон Панна",
                "Макиато",
                "Кофе по-венски",
            ),
            (
                "Кон Панна",
                "Макиато",
                "Кофе по-венски",
            ),
            (
                "Эспрессо",
                "Макиато",
                "Кофе по-венски",
            ),
        ),
        (
            "Эспрессо",
            "Капучино",
            "Макиато",
            "Кофе по-венски",
            "Латте Макиато",
            "Кон Панна",
            "К сожалению, не можем предложить Вам напиток",
        ),
        "zero ingredients in_stock left",
    ),
]

g_test_data = [
    (
        ((1, 2, 3, 4, 5, 6), (1, 2)),
        (((9, 12), (3.0, 4.0)), ((10, 14), (2.5, 3.5))),
        "first open test",
    ),
    (
        ((3.5, 2.14, 45.2, 37.99), (5.2, 7.3), (1.23, 4.56, 3.14, 2.71, 0, 0)),
        (
            ((48.7, 40.13), (24.35, 20.07)),
            ((53.9, 47.43), (17.97, 15.81)),
            ((58.27, 54.7), (9.71, 9.12)),
        ),
        "second open test",
    ),
    (
        ((1.0, 2.0, 3.0, 4.0, 5.0, 6.0), (1, 2, 3, 4, 5, 6)),
        (
            ((9.0, 12.0), (3.0, 4.0)),
            ((18.0, 24.0), (3.0, 4.0)),
        ),
        "same results",
    ),
    (
        ((0.1, 0.2, 0.3, 0.4, 0.5, 0.6), (0.6, 0.5, 0.4, 0.3, 0.2, 0.1)),
        (
            ((0.9, 1.2), (0.3, 0.4)),
            ((2.1, 2.1), (0.35, 0.35)),
        ),
        "small results",
    ),
    (
        (
            (10**4, 10**5, 10**6, 10**7, 10**8, 21 + 10**9),
            (21**4, 112**5, 89**6, 15**7, 67**8, 27**9),
        ),
        (
            ((101010000, 1010100021), (33670000.0, 336700007.0)),
            (
                (406564760052083, 7644401861215),
                (67760793342013.84, 1274066976869.17),
            ),
        ),
        "big numbers",
    ),
]

h_test_data = [
    ("мама мыла раму", ["мама", "мыла", "раму"], "first open test"),
    (
        "Яндекс использует Python во многих проектах",
        ["во", "Python", "многих", "Яндекс", "проектах", "использует"],
        "second open test",
    ),
    ("abc aab aaa", ["aaa", "aab", "abc"], "second key test"),
    ("aBc Aab AAA", ["AAA", "Aab", "aBc"], "sEcOnD key test"),
    ("abc", ["abc"], "one word"),
    ("6 5 4 3 2 1 10", ["1", "2", "3", "4", "5", "6", "10"], "digits"),
]

i_test_data = [
    ((1, 2, 3, 4, 5), (2, 4), "first open test"),
    ((32, 64, 128, 256, 512), (64, 512), "second open test"),
    ((10**12 + 1,), (10**12 + 1,), "big number"),
    ((0, 0, 0, 0, 0), (0, 0, 0, 0, 0), "zeroes"),
    (
        tuple(range(1, 101, 2)),
        (
            11,
            13,
            15,
            17,
            19,
            31,
            33,
            35,
            37,
            39,
            51,
            53,
            55,
            57,
            59,
            71,
            73,
            75,
            77,
            79,
            91,
            93,
            95,
            97,
            99,
        ),
        "many odd numbers",
    ),
]

j_test_data = [
    (
        "Hello, world!",
        {"l": ("hi", "y"), "o": ("123", "z")},
        "Hehiy123, wzrhid!",
        "first open test",
    ),
    (
        "ABRA-KADABRA",
        {
            "A": ("Z", "1", "!"),
            "B": ("3",),
            "R": ("X", "7"),
            "K": ("G", "H"),
            "D": ("0", "2"),
        },
        "Z3X1-G!0Z371",
        "second open test",
    ),
    ("AAAAAAAAA", {"A": ("b", "1")}, "b1b1b1b1b", "same letter"),
    ("", {}, "", "empty string"),
    ("a", {"a": ("b",)}, "b", "one letter"),
    ("a", {"a": (" ",)}, " ", "one letter to whitespace"),
    (
        "Ключевой секрет\n\n"
        "Вася любит секреты и шифрование. "
        "Он часто пользуется шифром на основе замен и просит разработать вас функцию, "
        "которая позволит ему быстро шифровать сообщения.",
        {"\n": ("\t", "\n\n"), "и": ("", "й"), "е": ("!", "?", "_")},
        "Ключ!вой с?кр_т\t\n\n"
        "Вася любт с!кр?ты й шфрованй_. "
        "Он часто пользу!тся шфром на основ? зам_н й прост разработать вас функцйю, "
        "которая позволт !му быстро шйфровать сообщ?ня.",
        "weird signs",
    ),
]
