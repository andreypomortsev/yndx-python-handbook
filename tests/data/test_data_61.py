import numpy as np

a_test_data = [
    (2.71, 0.4818035253577275, "first open test"),
    (12.345, 4.880549344757598, "second open test"),
    (-10.5, -9.829809094966793, "negative number"),
    (-3.14, -0.09471838339448091, "negative pi approximation"),
    (-1.0, -0.9706428736868488, "negative one"),
    (-0.75, -0.809436246544161, "negative float less than one"),
    (-0.001, -0.37471701314935, "small negative float"),
    (0.0, float("-inf"), "zero"),
    (0.001, -0.37271701084266684, "small positive float"),
    (0.5, 0.4519571284477611, "small float"),
    (1.0, 0.9020549141143959, "one as a float"),
    (3.14, 0.11303574638480451, "pi approximation"),
    (4.5, -0.6240834307830083, "samll float less than 5"),
    (7.0, -0.2214612114664246, "small float less than 10"),
    (10.5, 10.031076291311848, "float a bit more than 10"),
    (16, -0.6466959749816906, "int"),
    (32.0, 25.401849864300207, "float power of 2"),
    (100, 4.594101413661028, "hundred as int"),
    (256.0, 0.26763909053316015, "power of 2 more than 100"),
    (512.5, 63.04114414947364, "a bit more than 2 in power of 9"),
    (1000.0, 883.4842630033106, "thousand"),
    (-100.0, 2.417889735345152, "negative one hundred"),
    (1024.0, 21.288934917833924, "2 in power of 10"),
]
# fmt: off
b_test_data = (
    (
        "2 1000 20 34\n"
        "36 12\n"
        "3 96 12\n"
        "6\n"
        "7 8 9 10\n",
        "2\n12\n3\n6\n1\n",
        "first open test",
    ),
    (
        "2 1000 20 34\n"
        "36 12\n"
        "3 96 12\n"
        "6\n"
        "\n"
        "7 8 9 10 17\n",
        "2\n12\n3\n6\n0\n1\n",
        "empty line",
    ),
    (
        "5 11 17 23\n"
        "13 19\n"
        "2 7 3\n"
        "29 9999997\n"
        "41 43 47\n",
        "1\n1\n1\n1\n1\n",
        "prime numbers few lines",
    ),
    (
        "5 11 17 23 13 19 2 7 3 29 41 43 47\n",
        "1\n",
        "line of prime numbers",
    ),
    (
        "4 9 15 21\n"
        "18 24\n"
        "2 5 7\n"
        "14 10 22 10000002\n"
        "35 49 77\n",
        "1\n6\n1\n2\n7\n",
        "mixed prime and composite",
    ),
    (
        "1000000 2000000 3000000\n"
        "4000000 5000000\n"
        "6000000\n"
        "7000000\n",
        "1000000\n1000000\n6000000\n7000000\n",
        "large numbers with common factor",
    ),
    (
        "8 8 8 8\n"
        "16 32\n"
        "24\n"
        "64\n",
        "8\n16\n24\n64\n",
        "repeated numbers",
    ),
    (
        "-3 -6 -9\n"
        "-12 -15\n"
        "-18\n"
        "-21\n",
        "3\n3\n18\n21\n",
        "negative numbers",
    ),
    (
        "0 10 20\n"
        "0 5\n"
        "15\n"
        "0\n",
        "10\n5\n15\n0\n",
        "zeros included",
    ),
)
# fmt: on

c_test_data = [
    ("4 2\n", "3 6\n", "first open test"),
    ("10 3\n", "36 120\n", "second open test"),
    (
        "192 121\n",
        "324986985566569306378062773601957157648284518539987350 "
        "515681828337035593591636797781617969160914277352707200\n",
        "big numbers",
    ),
    (
        "2 1\n",
        "1 2\n",
        "small numbers",
    ),
    (
        "2 0\n",
        "0 1\n",
        "zero seats",
    ),
    (
        "1 1\n",
        "1 1\n",
        "only one",
    ),
    (
        "192 7\n",
        "62291483793 1708566412608\n",
        "many people a few seats",
    ),
    (
        "2137 2137\n",
        "1 1\n",
        "seats == people",
    ),
]

d_test_data = [
    ("1 2 3 4 5\n", "2.605171084697352\n", "first open test"),
    ("1.1 1.2 1.3 1.4 1.5\n", "1.292252305460076\n", "second open test"),
    ("0.01 0.02 0.03 0.04 0.05\n", "0.026051710846973514\n", "small floats"),
    (
        "213120.01 213120.02 213120.03 213120.04 213120.05\n",
        "213120.02999999968\n",
        "big floats with small diff",
    ),
    (
        "213120.01 213120 213120 213120 213120\n",
        "213120.0020000001\n",
        "same numbers and one different",
    ),
    (
        "10000000 10000000 10000000 10000000 10000000\n",
        "10000000.00000001\n",
        "same numbers",
    ),
    ("9 8 7 6 5 4 3 2 1\n", "4.147166274396913\n", "decreasing numbers"),
    ("6 1 4 7 5 9 3 2 8\n", "4.147166274396913\n", "mixed numbers"),
]

e_test_data = [
    ("-7 20\n7 3.141592653589793\n", "20.0\n", "first open test"),
    (
        "10 10\n10.142135623730951 0.7853981633974483\n",
        "3.9999999999999996\n",
        "second open test",
    ),
    ("0 0\n7 3.141592653589793\n", "7.0\n", "zero to point"),
    ("5.2 12.07\n0 0\n", "13.14248454440788\n", "point to zero"),
    ("0.0 0\n0 0.0\n", "0.0\n", "the same point"),
    (
        "-1.02 -3.103\n10.142135623730951 0.7853981633974483\n",
        "13.140346796774251\n",
        "negative point",
    ),
    (
        "-1.02 -3.103\n-16.162398163730951 -0.785397309974483\n",
        "17.874656533946972\n",
        "negative points",
    ),
    (
        "12.02132 33.10133\n-6.16000003730951 -20.785397309974483\n",
        "29.057657546944384\n",
        "another negative point",
    ),
]

f_test_data = [
    (3, np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]]), "first open test"),
    (
        5,
        np.array(
            [
                [1, 2, 3, 4, 5],
                [2, 4, 6, 8, 10],
                [3, 6, 9, 12, 15],
                [4, 8, 12, 16, 20],
                [5, 10, 15, 20, 25],
            ]
        ),
        "second open test",
    ),
    (
        4,
        np.array(
            [
                [1, 2, 3, 4],
                [2, 4, 6, 8],
                [3, 6, 9, 12],
                [4, 8, 12, 16],
            ]
        ),
        "even size",
    ),
    (
        921,
        np.arange(1, 921 + 1) * np.arange(1, 921 + 1)[:, np.newaxis],
        "big size",
    ),
    (
        10**3,
        np.arange(1, 10**3 + 1) * np.arange(1, 10**3 + 1)[:, np.newaxis],
        "really big size",
    ),
    (1, np.array([[1]]), "one"),
    (2, np.array([[1, 2], [2, 4]]), "two"),
]

g_test_data = [
    (
        4,
        np.array([[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]]),
        "first open test",
    ),
    (
        6,
        np.array(
            [
                [1, 0, 1, 0, 1, 0],
                [0, 1, 0, 1, 0, 1],
                [1, 0, 1, 0, 1, 0],
                [0, 1, 0, 1, 0, 1],
                [1, 0, 1, 0, 1, 0],
                [0, 1, 0, 1, 0, 1],
            ]
        ),
        "second open test",
    ),
    (1, np.array([[1]]), "one"),
    (2, np.array([[1, 0], [0, 1]]), "two"),
    (
        17,
        np.array(
            [
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
            ]
        ),
        "seventeen",
    ),
]

h_test_data = [
    (
        (3, 5),
        None,
        np.array(
            [[1, 2, 3], [6, 5, 4], [7, 8, 9], [12, 11, 10], [13, 14, 15]],
            dtype=np.int16,
        ),
        "first open test",
    ),
    (
        (3, 5),
        "V",
        np.array(
            [[1, 10, 11], [2, 9, 12], [3, 8, 13], [4, 7, 14], [5, 6, 15]],
            dtype=np.int16,
        ),
        "second open test",
    ),
    ((1, 1), None, np.array([[1]], dtype=np.int16), "one"),
    ((1, 1), "V", np.array([[1]], dtype=np.int16), "one v"),
    ((1, 2), None, np.array([[1], [2]], dtype=np.int16), "two"),
    ((1, 2), "H", np.array([[1], [2]], dtype=np.int16), "two h"),
    ((1, 2), "V", np.array([[1], [2]], dtype=np.int16), "two v"),
    (
        (7, 9),
        None,
        np.array(
            [
                [1, 2, 3, 4, 5, 6, 7],
                [14, 13, 12, 11, 10, 9, 8],
                [15, 16, 17, 18, 19, 20, 21],
                [28, 27, 26, 25, 24, 23, 22],
                [29, 30, 31, 32, 33, 34, 35],
                [42, 41, 40, 39, 38, 37, 36],
                [43, 44, 45, 46, 47, 48, 49],
                [56, 55, 54, 53, 52, 51, 50],
                [57, 58, 59, 60, 61, 62, 63],
            ],
            dtype=np.int16,
        ),
        "7x9 default",
    ),
    (
        (7, 9),
        "V",
        np.array(
            [
                [1, 18, 19, 36, 37, 54, 55],
                [2, 17, 20, 35, 38, 53, 56],
                [3, 16, 21, 34, 39, 52, 57],
                [4, 15, 22, 33, 40, 51, 58],
                [5, 14, 23, 32, 41, 50, 59],
                [6, 13, 24, 31, 42, 49, 60],
                [7, 12, 25, 30, 43, 48, 61],
                [8, 11, 26, 29, 44, 47, 62],
                [9, 10, 27, 28, 45, 46, 63],
            ],
            dtype=np.int16,
        ),
        "7x9 V",
    ),
    (
        (2, 12),
        None,
        np.array(
            [
                [1, 2],
                [4, 3],
                [5, 6],
                [8, 7],
                [9, 10],
                [12, 11],
                [13, 14],
                [16, 15],
                [17, 18],
                [20, 19],
                [21, 22],
                [24, 23],
            ],
            dtype=np.int16,
        ),
        "2x12",
    ),
    (
        (19, 1),
        "H",
        np.array(
            [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                ]
            ],
            dtype=np.int16,
        ),
        "1D array",
    ),
    (
        (1, 25),
        None,
        np.array(
            [
                [1],
                [2],
                [3],
                [4],
                [5],
                [6],
                [7],
                [8],
                [9],
                [10],
                [11],
                [12],
                [13],
                [14],
                [15],
                [16],
                [17],
                [18],
                [19],
                [20],
                [21],
                [22],
                [23],
                [24],
                [25],
            ],
            dtype=np.int16,
        ),
        "25x1D array",
    ),
]

i_test_data = [
    (
        np.arange(12).reshape(3, 4),
        90,
        np.array([[8, 4, 0], [9, 5, 1], [10, 6, 2], [11, 7, 3]]),
        "first open test",
    ),
    (
        np.arange(12).reshape(3, 4),
        270,
        np.array([[3, 7, 11], [2, 6, 10], [1, 5, 9], [0, 4, 8]]),
        "second open test",
    ),
    (
        np.arange(12).reshape(3, 4),
        -270,
        np.array([[8, 4, 0], [9, 5, 1], [10, 6, 2], [11, 7, 3]]),
        "second open test clockwise",
    ),
    (
        np.arange(9, 129, 6).reshape(5, 4),
        -180,
        np.array(
            [
                [123, 117, 111, 105],
                [99, 93, 87, 81],
                [75, 69, 63, 57],
                [51, 45, 39, 33],
                [27, 21, 15, 9],
            ]
        ),
        "-180",
    ),
    (
        np.arange(9, 129, 6).reshape(5, 4),
        180,
        np.array(
            [
                [123, 117, 111, 105],
                [99, 93, 87, 81],
                [75, 69, 63, 57],
                [51, 45, 39, 33],
                [27, 21, 15, 9],
            ]
        ),
        "180",
    ),
    (
        np.arange(9, 129, 6).reshape(5, 4),
        360,
        np.arange(9, 129, 6).reshape(5, 4),
        "full rotation",
    ),
    (
        np.arange(9, 129, 6).reshape(5, 4),
        -720,
        np.arange(9, 129, 6).reshape(5, 4),
        "full 2 rotations clockwise",
    ),
]

j_test_data = [
    (
        np.arange(3),
        np.array([[0, 1, 2], [2, 0, 1], [1, 2, 0]]),
        "first open test",
    ),
    (
        np.arange(5),
        np.array(
            [
                [0, 1, 2, 3, 4],
                [4, 0, 1, 2, 3],
                [3, 4, 0, 1, 2],
                [2, 3, 4, 0, 1],
                [1, 2, 3, 4, 0],
            ]
        ),
        "second open test",
    ),
    (
        np.arange(5),
        np.array(
            [
                [0, 1, 2, 3, 4],
                [4, 0, 1, 2, 3],
                [3, 4, 0, 1, 2],
                [2, 3, 4, 0, 1],
                [1, 2, 3, 4, 0],
            ]
        ),
        "second open test",
    ),
    (
        np.arange(-5, -1),
        np.array(
            [
                [-5, -4, -3, -2],
                [-2, -5, -4, -3],
                [-3, -2, -5, -4],
                [-4, -3, -2, -5],
            ]
        ),
        "negative numbers",
    ),
    (
        np.arange(-5, 5),
        np.array(
            [
                [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4],
                [4, -5, -4, -3, -2, -1, 0, 1, 2, 3],
                [3, 4, -5, -4, -3, -2, -1, 0, 1, 2],
                [2, 3, 4, -5, -4, -3, -2, -1, 0, 1],
                [1, 2, 3, 4, -5, -4, -3, -2, -1, 0],
                [0, 1, 2, 3, 4, -5, -4, -3, -2, -1],
                [-1, 0, 1, 2, 3, 4, -5, -4, -3, -2],
                [-2, -1, 0, 1, 2, 3, 4, -5, -4, -3],
                [-3, -2, -1, 0, 1, 2, 3, 4, -5, -4],
                [-4, -3, -2, -1, 0, 1, 2, 3, 4, -5],
            ]
        ),
        "negative to positive numbers",
    ),
    (
        np.array([0, 1, 1, 1, 1, 1, 1, 1]),
        np.array(
            [
                [0, 1, 1, 1, 1, 1, 1, 1],
                [1, 0, 1, 1, 1, 1, 1, 1],
                [1, 1, 0, 1, 1, 1, 1, 1],
                [1, 1, 1, 0, 1, 1, 1, 1],
                [1, 1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 1, 1, 0, 1, 1],
                [1, 1, 1, 1, 1, 1, 0, 1],
                [1, 1, 1, 1, 1, 1, 1, 0],
            ]
        ),
        "custom array",
    ),
    (
        np.array(["1", "2", "3", "4", "5"]),
        np.array(
            [
                ["1", "2", "3", "4", "5"],
                ["5", "1", "2", "3", "4"],
                ["4", "5", "1", "2", "3"],
                ["3", "4", "5", "1", "2"],
                ["2", "3", "4", "5", "1"],
            ]
        ),
        "string array",
    ),
]
