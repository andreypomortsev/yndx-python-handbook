import math

import numpy as np
import pandas as pd

length_stats_test_data = [
    (
        "Мама мыла раму",
        pd.Series({"мама": 4, "мыла": 4, "раму": 4}),
        "first open test",
    ),
    (
        "Лес, опушка, странный домик. Лес, опушка и зверушка.",
        pd.Series(
            {
                "домик": 5,
                "зверушка": 8,
                "и": 1,
                "лес": 3,
                "опушка": 6,
                "странный": 8,
            }
        ),
        "second open test",
    ),
    (
        "str.maketrans(" ", " ", string.punctuation + string.digits)",
        pd.Series(
            {"stringdigits": 12, "stringpunctuation": 17, "strmaketrans": 12}
        ),
        "part of the solution",
    ),
    (
        "stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default "
        'warn("Workbook contains no default style, apply openpyxl\'s default")',
        pd.Series(
            {
                "apply": 5,
                "contains": 8,
                "default": 7,
                "no": 2,
                "openpyxls": 9,
                "style": 5,
                "stylesheetpy": 12,
                "userwarning": 11,
                "warnworkbook": 12,
                "workbook": 8,
            }
        ),
        "mix of chars, digits, and punctuation",
    ),
    (
        "stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default "
        'warn("Workbook contains no default style, apply openpyxl\'s default")\nНо это не точно',
        pd.Series(
            {
                "apply": 5,
                "contains": 8,
                "default": 7,
                "no": 2,
                "openpyxls": 9,
                "style": 5,
                "stylesheetpy": 12,
                "userwarning": 11,
                "warnworkbook": 12,
                "workbook": 8,
                "не": 2,
                "но": 2,
                "точно": 5,
                "это": 3,
            }
        ),
        "mix of chars, digits, and punctuation in two languages",
    ),
    ("", pd.Series({}, dtype="int64"), "empty string"),
]

length_stats_test_data_2 = [
    (
        "Мама мыла раму",
        (
            pd.Series({}, dtype="int64"),
            pd.Series({"мама": 4, "мыла": 4, "раму": 4}),
        ),
        "first open test",
    ),
    (
        "Лес, опушка, странный домик. Лес, опушка и зверушка.",
        (
            pd.Series(
                {
                    "домик": 5,
                    "и": 1,
                    "лес": 3,
                }
            ),
            pd.Series(
                {
                    "зверушка": 8,
                    "опушка": 6,
                    "странный": 8,
                }
            ),
        ),
        "second open test",
    ),
    (
        "str.maketrans(" ", " ", string.punctuation + string.digits)",
        (
            pd.Series({"stringpunctuation": 17}),
            pd.Series({"stringdigits": 12, "strmaketrans": 12}),
        ),
        "some code",
    ),
    (
        "stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default "
        'warn("Workbook contains no default style, apply openpyxl\'s default")',
        (
            pd.Series(
                {
                    "apply": 5,
                    "default": 7,
                    "openpyxls": 9,
                    "style": 5,
                    "userwarning": 11,
                }
            ),
            pd.Series(
                {
                    "contains": 8,
                    "no": 2,
                    "stylesheetpy": 12,
                    "warnworkbook": 12,
                    "workbook": 8,
                }
            ),
        ),
        "mix of chars, digits, and punctuation",
    ),
    (
        "stylesheet.py:237: UserWarning: Workbook contains no "
        "default style, apply openpyxl's default warn(\"Workbook "
        "contains no default style, apply openpyxl's default\")\nНо это не точно",
        (
            pd.Series(
                {
                    "apply": 5,
                    "default": 7,
                    "openpyxls": 9,
                    "style": 5,
                    "userwarning": 11,
                    "точно": 5,
                    "это": 3,
                }
            ),
            pd.Series(
                {
                    "contains": 8,
                    "no": 2,
                    "stylesheetpy": 12,
                    "warnworkbook": 12,
                    "workbook": 8,
                    "не": 2,
                    "но": 2,
                }
            ),
        ),
        "mix of chars, digits, and punctuation in two languages",
    ),
    (
        "stylesheet.py:237: UserWarning: Workbook contains no "
        "default style, apply openpyxl's default warn(\"Workbook "
        "contains no default style, apply openpyxl's default\")\nНо это не точно "
        * 10**3,
        (
            pd.Series(
                {
                    "apply": 5,
                    "default": 7,
                    "openpyxls": 9,
                    "style": 5,
                    "userwarning": 11,
                    "точно": 5,
                    "это": 3,
                }
            ),
            pd.Series(
                {
                    "contains": 8,
                    "no": 2,
                    "stylesheetpy": 12,
                    "warnworkbook": 12,
                    "workbook": 8,
                    "не": 2,
                    "но": 2,
                }
            ),
        ),
        "long string",
    ),
    (
        "",
        (pd.Series({}, dtype="int64"), pd.Series({}, dtype="int64")),
        "empty string",
    ),
]

cheque_test_data = [
    (
        pd.Series({"bread": 37, "milk": 58, "soda": 99, "cream": 72}),
        {"soda": 3, "milk": 2, "cream": 1},
        pd.DataFrame(
            {
                "product": {0: "cream", 1: "milk", 2: "soda"},
                "price": {0: 72, 1: 58, 2: 99},
                "number": {0: 1, 1: 2, 2: 3},
                "cost": {0: 72, 1: 116, 2: 297},
            }
        ),
        pd.DataFrame(
            {
                "product": {0: "cream", 1: "milk", 2: "soda"},
                "price": {0: 72, 1: 58, 2: 99},
                "number": {0: 1, 1: 2, 2: 3},
                "cost": {0: 72.0, 1: 116.0, 2: 148.5},
            }
        ),
        "first open test",
    ),
    (
        pd.Series({"beer": 37, "milk": 58, "soda": 99, "cream": 72}),
        {"beer": 2},
        pd.DataFrame(
            {
                "product": {0: "beer"},
                "price": {0: 37},
                "number": {0: 2},
                "cost": {0: 74},
            }
        ),
        pd.DataFrame(
            {
                "product": {0: "beer"},
                "price": {0: 37},
                "number": {0: 2},
                "cost": {0: 74.0},
            }
        ),
        "only beer",
    ),
    (
        pd.Series({"beer": 19.92}),
        {"beer": 6, "soda": 3, "milk": 2, "cream": 1},
        pd.DataFrame(
            {
                "product": {0: "beer"},
                "price": {0: 19.92},
                "number": {0: 6},
                "cost": {0: 119.52000000000001},
            }
        ),
        pd.DataFrame(
            {
                "product": {0: "beer"},
                "price": {0: 19.92},
                "number": {0: 6},
                "cost": {0: 59.760000000000005},
            }
        ),
        "only beer in store",
    ),
    (
        pd.Series(
            {
                "bread": 3.79,
                "milk": 5.89,
                "soda": 9.99,
                "cream": 10.72,
                "tea": 0.99,
            }
        ),
        {"soda": 213, "milk": 322, "cream": 221, "tea": 0.3},
        pd.DataFrame(
            {
                "product": {0: "cream", 1: "milk", 2: "soda", 3: "tea"},
                "price": {0: 10.72, 1: 5.89, 2: 9.99, 3: 0.99},
                "number": {0: 221.0, 1: 322.0, 2: 213.0, 3: 0.3},
                "cost": {
                    0: 2369.1200000000003,
                    1: 1896.58,
                    2: 2127.87,
                    3: 0.297,
                },
            }
        ),
        pd.DataFrame(
            {
                "product": {0: "cream", 1: "milk", 2: "soda", 3: "tea"},
                "price": {0: 10.72, 1: 5.89, 2: 9.99, 3: 0.99},
                "number": {0: 221.0, 1: 322.0, 2: 213.0, 3: 0.3},
                "cost": {
                    0: 1184.5600000000002,
                    1: 948.29,
                    2: 1063.935,
                    3: 0.297,
                },
            }
        ),
        "a lot of products",
    ),
]

get_long_test_data = [
    (
        pd.Series({"мир": 3, "питон": 5, "привет": 6, "яндекс": 6}),
        {},
        pd.Series({"питон": 5, "привет": 6, "яндекс": 6}),
        "first open test",
    ),
    (
        pd.Series({"мир": 3, "питон": 5, "привет": 6, "яндекс": 6}),
        {"min_length": 6},
        pd.Series({"привет": 6, "яндекс": 6}),
        "second open test",
    ),
    (
        pd.Series({"мир": 13, "питон": 25, "привет": 26, "яндекс": 63}),
        {"min_length": 6},
        pd.Series({"мир": 13, "питон": 25, "привет": 26, "яндекс": 63}),
        "all more than the limit",
    ),
    (
        pd.Series({"мир": 13, "питон": 25, "привет": 26, "яндекс": 63}),
        {"min_length": 64},
        pd.Series({}, dtype="int64"),
        "none more than the limit",
    ),
]

filter_test_data = [
    (
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Петров",
                    2: "Сидоров",
                    3: "Васечкин",
                    4: "Николаев",
                },
                "maths": {0: 5, 1: 4, 2: 5, 3: 2, 4: 4},
                "physics": {0: 4, 1: 4, 2: 4, 3: 5, 4: 5},
                "computer science": {0: 5, 1: 2, 2: 5, 3: 4, 4: 3},
            }
        ),  # Input data
        pd.DataFrame(
            {
                "name": {0: "Иванов", 2: "Сидоров"},
                "maths": {0: 5, 2: 5},
                "physics": {0: 4, 2: 4},
                "computer science": {0: 5, 2: 5},
            }
        ),  # Expected return from solution F 6.2
        pd.DataFrame(
            {
                "name": {1: "Петров", 3: "Васечкин"},
                "maths": {1: 4, 3: 2},
                "physics": {1: 4, 3: 5},
                "computer science": {1: 2, 3: 4},
            }
        ),  # Expected return from solution G 6.2
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    2: "Сидоров",
                    4: "Николаев",
                    3: "Васечкин",
                    1: "Петров",
                },
                "maths": {0: 5, 2: 5, 4: 4, 3: 2, 1: 4},
                "physics": {0: 4, 2: 4, 4: 5, 3: 5, 1: 4},
                "computer science": {0: 5, 2: 5, 4: 3, 3: 4, 1: 2},
                "average": {
                    0: 4.666666666666667,
                    2: 4.666666666666667,
                    4: 4.0,
                    3: 3.6666666666666665,
                    1: 3.3333333333333335,
                },
            }
        ),  # Expected return from solution H 6.2
        "first open test",
    ),
    (
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    2: "Петров",
                    3: "Сидоров",
                    4: "Васечкин",
                    5: "Николаев",
                },
                "maths": {0: 5, 1: 5, 2: 4, 3: 5, 4: 2, 5: 4},
                "physics": {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 5},
                "computer science": {0: 5, 1: 4, 2: 2, 3: 5, 4: 4, 5: 3},
            }
        ),
        pd.DataFrame(
            {
                "name": {0: "Иванов", 1: "Иванова", 3: "Сидоров"},
                "maths": {0: 5, 1: 5, 3: 5},
                "physics": {0: 4, 1: 5, 3: 4},
                "computer science": {0: 5, 1: 4, 3: 5},
            }
        ),
        pd.DataFrame(
            {
                "name": {2: "Петров", 4: "Васечкин"},
                "maths": {2: 4, 4: 2},
                "physics": {2: 4, 4: 5},
                "computer science": {2: 2, 4: 4},
            }
        ),
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    3: "Сидоров",
                    5: "Николаев",
                    4: "Васечкин",
                    2: "Петров",
                },
                "maths": {0: 5, 1: 5, 3: 5, 5: 4, 4: 2, 2: 4},
                "physics": {0: 4, 1: 5, 3: 4, 5: 5, 4: 5, 2: 4},
                "computer science": {0: 5, 1: 4, 3: 5, 5: 3, 4: 4, 2: 2},
                "average": {
                    0: 4.666666666666667,
                    1: 4.666666666666667,
                    3: 4.666666666666667,
                    5: 4.0,
                    4: 3.6666666666666665,
                    2: 3.3333333333333335,
                },
            }
        ),
        "add one girl",
    ),
    (
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    2: "Петров",
                    3: "Сидоров",
                    4: "Васечкин",
                    5: "Николаев",
                },
                "maths": {0: 5, 1: 3, 2: 4, 3: 3, 4: 2, 5: 4},
                "physics": {0: 4, 1: 5, 2: 4, 3: 4, 4: 5, 5: 5},
                "computer science": {0: 3, 1: 4, 2: 2, 3: 5, 4: 4, 5: 3},
            }
        ),
        pd.DataFrame(
            columns=["name", "maths", "physics", "computer science"]
        ).astype(
            {
                "maths": "int64",
                "physics": "int64",
                "computer science": "int64",
            }
        ),
        pd.DataFrame(
            {
                "name": {2: "Петров", 4: "Васечкин"},
                "maths": {2: 4, 4: 2},
                "physics": {2: 4, 4: 5},
                "computer science": {2: 2, 4: 4},
            }
        ),
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    5: "Николаев",
                    3: "Сидоров",
                    4: "Васечкин",
                    2: "Петров",
                },
                "maths": {0: 5, 1: 3, 5: 4, 3: 3, 4: 2, 2: 4},
                "physics": {0: 4, 1: 5, 5: 5, 3: 4, 4: 5, 2: 4},
                "computer science": {0: 3, 1: 4, 5: 3, 3: 5, 4: 4, 2: 2},
                "average": {
                    0: 4.0,
                    1: 4.0,
                    5: 4.0,
                    3: 4.0,
                    4: 3.6666666666666665,
                    2: 3.3333333333333335,
                },
            }
        ),
        "bad students",
    ),
    (
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    2: "Петров",
                    3: "Сидоров",
                    4: "Васечкин",
                    5: "Николаев",
                    6: "Смирнов",
                    7: "Кузнецов",
                    8: "Соколов",
                    9: "Попов",
                    10: "Лебедев",
                    11: "Козлов",
                    12: "Новиков",
                    13: "Морозов",
                    14: "Егоров",
                    15: "Волков",
                    16: "Алексеев",
                    17: "Лебедева",
                    18: "Павлова",
                    19: "Романов",
                    20: "Степанов",
                    21: "Павлов",
                    22: "Андреев",
                    23: "Ковалев",
                    24: "Медведев",
                    25: "Орлов",
                    26: "Гусев",
                    27: "Гончаров",
                    28: "Тимофеев",
                    29: "Фролов",
                    30: "Жуков",
                    31: "Беляев",
                    32: "Давыдов",
                    33: "Журавлев",
                    34: "Герасимов",
                    35: "Тарасов",
                    36: "Зайцев",
                    37: "Борисов",
                    38: "Королев",
                    39: "Григорьев",
                    40: "Родионов",
                    41: "Овчинников",
                    42: "Федотов",
                    43: "Соловьев",
                    44: "Макаров",
                    45: "Киселев",
                    46: "Ильин",
                    47: "Максимов",
                    48: "Калинин",
                    49: "Белоусов",
                    50: "Климов",
                    51: "Анисимов",
                    52: "Чернов",
                    53: "Голубев",
                    54: "Данилов",
                    55: "Савельев",
                    56: "Тихомиров",
                    57: "Кудрявцев",
                    58: "Баранцев",
                    59: "Филиппов",
                    60: "Марков",
                    61: "Батырев",
                    62: "Прохоров",
                    63: "Рожков",
                    64: "Галкин",
                    65: "Панфилов",
                    66: "Широков",
                    67: "Виноградов",
                    68: "Беляков",
                    69: "Горбунов",
                    70: "Власов",
                    71: "Маслов",
                    72: "Жарков",
                    73: "Игнатьев",
                    74: "Сысоев",
                    75: "Фомичев",
                    76: "Сергеев",
                    77: "Семенов",
                    78: "Фомин",
                    79: "Рябов",
                    80: "Ананьев",
                    81: "Воронцов",
                    82: "Пономарев",
                    83: "Носков",
                    84: "Симонов",
                    85: "Гаврилов",
                    86: "Воронова",
                    87: "Третьяков",
                    88: "Титов",
                    89: "Фадеев",
                    90: "Захаров",
                    91: "Демидов",
                    92: "Миронов",
                    93: "Щербаков",
                    94: "Кондратьев",
                    95: "Беляев",
                    96: "Антонов",
                    97: "Шишкин",
                    98: "Богданов",
                    99: "Горелов",
                    100: "Прокофьев",
                },
                "maths": {
                    0: 5,
                    1: 5,
                    2: 4,
                    3: 5,
                    4: 2,
                    5: 4,
                    6: 3,
                    7: 4,
                    8: 5,
                    9: 2,
                    10: 3,
                    11: 5,
                    12: 4,
                    13: 3,
                    14: 5,
                    15: 4,
                    16: 2,
                    17: 3,
                    18: 5,
                    19: 4,
                    20: 5,
                    21: 2,
                    22: 3,
                    23: 4,
                    24: 5,
                    25: 2,
                    26: 3,
                    27: 4,
                    28: 5,
                    29: 3,
                    30: 4,
                    31: 5,
                    32: 3,
                    33: 4,
                    34: 2,
                    35: 3,
                    36: 5,
                    37: 4,
                    38: 2,
                    39: 3,
                    40: 5,
                    41: 4,
                    42: 3,
                    43: 5,
                    44: 4,
                    45: 2,
                    46: 3,
                    47: 4,
                    48: 5,
                    49: 2,
                    50: 3,
                    51: 5,
                    52: 4,
                    53: 2,
                    54: 3,
                    55: 4,
                    56: 5,
                    57: 2,
                    58: 3,
                    59: 4,
                    60: 5,
                    61: 3,
                    62: 2,
                    63: 4,
                    64: 5,
                    65: 3,
                    66: 4,
                    67: 2,
                    68: 5,
                    69: 4,
                    70: 3,
                    71: 2,
                    72: 4,
                    73: 5,
                    74: 3,
                    75: 4,
                    76: 2,
                    77: 5,
                    78: 4,
                    79: 3,
                    80: 2,
                    81: 5,
                    82: 4,
                    83: 3,
                    84: 5,
                    85: 2,
                    86: 3,
                    87: 4,
                    88: 5,
                    89: 2,
                    90: 4,
                    91: 3,
                    92: 5,
                    93: 2,
                    94: 4,
                    95: 3,
                    96: 5,
                    97: 2,
                    98: 3,
                    99: 4,
                    100: 5,
                },
                "physics": {
                    0: 4,
                    1: 5,
                    2: 4,
                    3: 4,
                    4: 5,
                    5: 5,
                    6: 3,
                    7: 5,
                    8: 4,
                    9: 2,
                    10: 5,
                    11: 3,
                    12: 4,
                    13: 5,
                    14: 3,
                    15: 4,
                    16: 2,
                    17: 5,
                    18: 4,
                    19: 3,
                    20: 2,
                    21: 5,
                    22: 3,
                    23: 4,
                    24: 2,
                    25: 3,
                    26: 4,
                    27: 5,
                    28: 3,
                    29: 2,
                    30: 5,
                    31: 4,
                    32: 3,
                    33: 2,
                    34: 5,
                    35: 4,
                    36: 2,
                    37: 3,
                    38: 5,
                    39: 4,
                    40: 3,
                    41: 2,
                    42: 5,
                    43: 4,
                    44: 3,
                    45: 5,
                    46: 2,
                    47: 4,
                    48: 3,
                    49: 2,
                    50: 5,
                    51: 4,
                    52: 3,
                    53: 5,
                    54: 2,
                    55: 3,
                    56: 4,
                    57: 5,
                    58: 2,
                    59: 3,
                    60: 4,
                    61: 5,
                    62: 2,
                    63: 3,
                    64: 4,
                    65: 5,
                    66: 3,
                    67: 4,
                    68: 2,
                    69: 3,
                    70: 5,
                    71: 4,
                    72: 2,
                    73: 3,
                    74: 5,
                    75: 4,
                    76: 3,
                    77: 5,
                    78: 2,
                    79: 4,
                    80: 3,
                    81: 5,
                    82: 2,
                    83: 3,
                    84: 4,
                    85: 5,
                    86: 2,
                    87: 4,
                    88: 3,
                    89: 5,
                    90: 2,
                    91: 4,
                    92: 3,
                    93: 5,
                    94: 4,
                    95: 2,
                    96: 5,
                    97: 3,
                    98: 4,
                    99: 2,
                    100: 5,
                },
                "computer science": {
                    0: 5,
                    1: 4,
                    2: 2,
                    3: 5,
                    4: 4,
                    5: 3,
                    6: 2,
                    7: 4,
                    8: 5,
                    9: 3,
                    10: 2,
                    11: 5,
                    12: 4,
                    13: 3,
                    14: 5,
                    15: 2,
                    16: 4,
                    17: 5,
                    18: 3,
                    19: 4,
                    20: 2,
                    21: 5,
                    22: 3,
                    23: 4,
                    24: 5,
                    25: 2,
                    26: 3,
                    27: 4,
                    28: 5,
                    29: 3,
                    30: 2,
                    31: 5,
                    32: 4,
                    33: 2,
                    34: 3,
                    35: 5,
                    36: 4,
                    37: 3,
                    38: 2,
                    39: 5,
                    40: 3,
                    41: 4,
                    42: 5,
                    43: 2,
                    44: 3,
                    45: 5,
                    46: 4,
                    47: 2,
                    48: 3,
                    49: 5,
                    50: 4,
                    51: 3,
                    52: 2,
                    53: 5,
                    54: 4,
                    55: 2,
                    56: 3,
                    57: 5,
                    58: 4,
                    59: 3,
                    60: 2,
                    61: 5,
                    62: 4,
                    63: 3,
                    64: 2,
                    65: 5,
                    66: 4,
                    67: 3,
                    68: 2,
                    69: 5,
                    70: 4,
                    71: 3,
                    72: 2,
                    73: 5,
                    74: 4,
                    75: 2,
                    76: 3,
                    77: 5,
                    78: 2,
                    79: 4,
                    80: 3,
                    81: 5,
                    82: 2,
                    83: 4,
                    84: 3,
                    85: 5,
                    86: 2,
                    87: 3,
                    88: 5,
                    89: 4,
                    90: 3,
                    91: 5,
                    92: 4,
                    93: 2,
                    94: 3,
                    95: 5,
                    96: 4,
                    97: 2,
                    98: 3,
                    99: 5,
                    100: 4,
                },
            }
        ),
        pd.DataFrame(
            {
                "name": {
                    0: "Иванов",
                    1: "Иванова",
                    3: "Сидоров",
                    7: "Кузнецов",
                    8: "Соколов",
                    12: "Новиков",
                    23: "Ковалев",
                    27: "Гончаров",
                    31: "Беляев",
                    77: "Семенов",
                    81: "Воронцов",
                    96: "Антонов",
                    100: "Прокофьев",
                },
                "maths": {
                    0: 5,
                    1: 5,
                    3: 5,
                    7: 4,
                    8: 5,
                    12: 4,
                    23: 4,
                    27: 4,
                    31: 5,
                    77: 5,
                    81: 5,
                    96: 5,
                    100: 5,
                },
                "physics": {
                    0: 4,
                    1: 5,
                    3: 4,
                    7: 5,
                    8: 4,
                    12: 4,
                    23: 4,
                    27: 5,
                    31: 4,
                    77: 5,
                    81: 5,
                    96: 5,
                    100: 5,
                },
                "computer science": {
                    0: 5,
                    1: 4,
                    3: 5,
                    7: 4,
                    8: 5,
                    12: 4,
                    23: 4,
                    27: 4,
                    31: 5,
                    77: 5,
                    81: 5,
                    96: 4,
                    100: 4,
                },
            }
        ),
        pd.DataFrame(
            {
                "name": {
                    2: "Петров",
                    4: "Васечкин",
                    6: "Смирнов",
                    9: "Попов",
                    10: "Лебедев",
                    15: "Волков",
                    16: "Алексеев",
                    20: "Степанов",
                    21: "Павлов",
                    24: "Медведев",
                    25: "Орлов",
                    29: "Фролов",
                    30: "Жуков",
                    33: "Журавлев",
                    34: "Герасимов",
                    36: "Зайцев",
                    38: "Королев",
                    41: "Овчинников",
                    43: "Соловьев",
                    45: "Киселев",
                    46: "Ильин",
                    47: "Максимов",
                    49: "Белоусов",
                    52: "Чернов",
                    53: "Голубев",
                    54: "Данилов",
                    55: "Савельев",
                    57: "Кудрявцев",
                    58: "Баранцев",
                    60: "Марков",
                    62: "Прохоров",
                    64: "Галкин",
                    67: "Виноградов",
                    68: "Беляков",
                    71: "Маслов",
                    72: "Жарков",
                    75: "Фомичев",
                    76: "Сергеев",
                    78: "Фомин",
                    80: "Ананьев",
                    82: "Пономарев",
                    85: "Гаврилов",
                    86: "Воронова",
                    89: "Фадеев",
                    90: "Захаров",
                    93: "Щербаков",
                    95: "Беляев",
                    97: "Шишкин",
                    99: "Горелов",
                },
                "maths": {
                    2: 4,
                    4: 2,
                    6: 3,
                    9: 2,
                    10: 3,
                    15: 4,
                    16: 2,
                    20: 5,
                    21: 2,
                    24: 5,
                    25: 2,
                    29: 3,
                    30: 4,
                    33: 4,
                    34: 2,
                    36: 5,
                    38: 2,
                    41: 4,
                    43: 5,
                    45: 2,
                    46: 3,
                    47: 4,
                    49: 2,
                    52: 4,
                    53: 2,
                    54: 3,
                    55: 4,
                    57: 2,
                    58: 3,
                    60: 5,
                    62: 2,
                    64: 5,
                    67: 2,
                    68: 5,
                    71: 2,
                    72: 4,
                    75: 4,
                    76: 2,
                    78: 4,
                    80: 2,
                    82: 4,
                    85: 2,
                    86: 3,
                    89: 2,
                    90: 4,
                    93: 2,
                    95: 3,
                    97: 2,
                    99: 4,
                },
                "physics": {
                    2: 4,
                    4: 5,
                    6: 3,
                    9: 2,
                    10: 5,
                    15: 4,
                    16: 2,
                    20: 2,
                    21: 5,
                    24: 2,
                    25: 3,
                    29: 2,
                    30: 5,
                    33: 2,
                    34: 5,
                    36: 2,
                    38: 5,
                    41: 2,
                    43: 4,
                    45: 5,
                    46: 2,
                    47: 4,
                    49: 2,
                    52: 3,
                    53: 5,
                    54: 2,
                    55: 3,
                    57: 5,
                    58: 2,
                    60: 4,
                    62: 2,
                    64: 4,
                    67: 4,
                    68: 2,
                    71: 4,
                    72: 2,
                    75: 4,
                    76: 3,
                    78: 2,
                    80: 3,
                    82: 2,
                    85: 5,
                    86: 2,
                    89: 5,
                    90: 2,
                    93: 5,
                    95: 2,
                    97: 3,
                    99: 2,
                },
                "computer science": {
                    2: 2,
                    4: 4,
                    6: 2,
                    9: 3,
                    10: 2,
                    15: 2,
                    16: 4,
                    20: 2,
                    21: 5,
                    24: 5,
                    25: 2,
                    29: 3,
                    30: 2,
                    33: 2,
                    34: 3,
                    36: 4,
                    38: 2,
                    41: 4,
                    43: 2,
                    45: 5,
                    46: 4,
                    47: 2,
                    49: 5,
                    52: 2,
                    53: 5,
                    54: 4,
                    55: 2,
                    57: 5,
                    58: 4,
                    60: 2,
                    62: 4,
                    64: 2,
                    67: 3,
                    68: 2,
                    71: 3,
                    72: 2,
                    75: 2,
                    76: 3,
                    78: 2,
                    80: 3,
                    82: 2,
                    85: 5,
                    86: 2,
                    89: 4,
                    90: 3,
                    93: 2,
                    95: 5,
                    97: 2,
                    99: 5,
                },
            }
        ),
        pd.DataFrame(
            {
                "name": {
                    81: "Воронцов",
                    77: "Семенов",
                    96: "Антонов",
                    31: "Беляев",
                    0: "Иванов",
                    1: "Иванова",
                    100: "Прокофьев",
                    3: "Сидоров",
                    8: "Соколов",
                    61: "Батырев",
                    27: "Гончаров",
                    14: "Егоров",
                    73: "Игнатьев",
                    11: "Козлов",
                    7: "Кузнецов",
                    17: "Лебедева",
                    65: "Панфилов",
                    28: "Тимофеев",
                    88: "Титов",
                    42: "Федотов",
                    51: "Анисимов",
                    70: "Власов",
                    85: "Гаврилов",
                    53: "Голубев",
                    69: "Горбунов",
                    39: "Григорьев",
                    91: "Демидов",
                    45: "Киселев",
                    50: "Климов",
                    23: "Ковалев",
                    57: "Кудрявцев",
                    24: "Медведев",
                    92: "Миронов",
                    5: "Николаев",
                    12: "Новиков",
                    21: "Павлов",
                    18: "Павлова",
                    84: "Симонов",
                    74: "Сысоев",
                    35: "Тарасов",
                    56: "Тихомиров",
                    4: "Васечкин",
                    64: "Галкин",
                    99: "Горелов",
                    30: "Жуков",
                    36: "Зайцев",
                    48: "Калинин",
                    94: "Кондратьев",
                    60: "Марков",
                    13: "Морозов",
                    40: "Родионов",
                    19: "Романов",
                    79: "Рябов",
                    43: "Соловьев",
                    87: "Третьяков",
                    89: "Фадеев",
                    66: "Широков",
                    95: "Беляев",
                    98: "Богданов",
                    37: "Борисов",
                    15: "Волков",
                    34: "Герасимов",
                    26: "Гусев",
                    32: "Давыдов",
                    10: "Лебедев",
                    44: "Макаров",
                    47: "Максимов",
                    83: "Носков",
                    41: "Овчинников",
                    2: "Петров",
                    63: "Рожков",
                    59: "Филиппов",
                    75: "Фомичев",
                    22: "Андреев",
                    58: "Баранцев",
                    49: "Белоусов",
                    68: "Беляков",
                    67: "Виноградов",
                    54: "Данилов",
                    90: "Захаров",
                    46: "Ильин",
                    38: "Королев",
                    71: "Маслов",
                    55: "Савельев",
                    20: "Степанов",
                    52: "Чернов",
                    93: "Щербаков",
                    16: "Алексеев",
                    80: "Ананьев",
                    72: "Жарков",
                    33: "Журавлев",
                    82: "Пономарев",
                    62: "Прохоров",
                    76: "Сергеев",
                    6: "Смирнов",
                    78: "Фомин",
                    29: "Фролов",
                    86: "Воронова",
                    25: "Орлов",
                    9: "Попов",
                    97: "Шишкин",
                },
                "maths": {
                    81: 5,
                    77: 5,
                    96: 5,
                    31: 5,
                    0: 5,
                    1: 5,
                    100: 5,
                    3: 5,
                    8: 5,
                    61: 3,
                    27: 4,
                    14: 5,
                    73: 5,
                    11: 5,
                    7: 4,
                    17: 3,
                    65: 3,
                    28: 5,
                    88: 5,
                    42: 3,
                    51: 5,
                    70: 3,
                    85: 2,
                    53: 2,
                    69: 4,
                    39: 3,
                    91: 3,
                    45: 2,
                    50: 3,
                    23: 4,
                    57: 2,
                    24: 5,
                    92: 5,
                    5: 4,
                    12: 4,
                    21: 2,
                    18: 5,
                    84: 5,
                    74: 3,
                    35: 3,
                    56: 5,
                    4: 2,
                    64: 5,
                    99: 4,
                    30: 4,
                    36: 5,
                    48: 5,
                    94: 4,
                    60: 5,
                    13: 3,
                    40: 5,
                    19: 4,
                    79: 3,
                    43: 5,
                    87: 4,
                    89: 2,
                    66: 4,
                    95: 3,
                    98: 3,
                    37: 4,
                    15: 4,
                    34: 2,
                    26: 3,
                    32: 3,
                    10: 3,
                    44: 4,
                    47: 4,
                    83: 3,
                    41: 4,
                    2: 4,
                    63: 4,
                    59: 4,
                    75: 4,
                    22: 3,
                    58: 3,
                    49: 2,
                    68: 5,
                    67: 2,
                    54: 3,
                    90: 4,
                    46: 3,
                    38: 2,
                    71: 2,
                    55: 4,
                    20: 5,
                    52: 4,
                    93: 2,
                    16: 2,
                    80: 2,
                    72: 4,
                    33: 4,
                    82: 4,
                    62: 2,
                    76: 2,
                    6: 3,
                    78: 4,
                    29: 3,
                    86: 3,
                    25: 2,
                    9: 2,
                    97: 2,
                },
                "physics": {
                    81: 5,
                    77: 5,
                    96: 5,
                    31: 4,
                    0: 4,
                    1: 5,
                    100: 5,
                    3: 4,
                    8: 4,
                    61: 5,
                    27: 5,
                    14: 3,
                    73: 3,
                    11: 3,
                    7: 5,
                    17: 5,
                    65: 5,
                    28: 3,
                    88: 3,
                    42: 5,
                    51: 4,
                    70: 5,
                    85: 5,
                    53: 5,
                    69: 3,
                    39: 4,
                    91: 4,
                    45: 5,
                    50: 5,
                    23: 4,
                    57: 5,
                    24: 2,
                    92: 3,
                    5: 5,
                    12: 4,
                    21: 5,
                    18: 4,
                    84: 4,
                    74: 5,
                    35: 4,
                    56: 4,
                    4: 5,
                    64: 4,
                    99: 2,
                    30: 5,
                    36: 2,
                    48: 3,
                    94: 4,
                    60: 4,
                    13: 5,
                    40: 3,
                    19: 3,
                    79: 4,
                    43: 4,
                    87: 4,
                    89: 5,
                    66: 3,
                    95: 2,
                    98: 4,
                    37: 3,
                    15: 4,
                    34: 5,
                    26: 4,
                    32: 3,
                    10: 5,
                    44: 3,
                    47: 4,
                    83: 3,
                    41: 2,
                    2: 4,
                    63: 3,
                    59: 3,
                    75: 4,
                    22: 3,
                    58: 2,
                    49: 2,
                    68: 2,
                    67: 4,
                    54: 2,
                    90: 2,
                    46: 2,
                    38: 5,
                    71: 4,
                    55: 3,
                    20: 2,
                    52: 3,
                    93: 5,
                    16: 2,
                    80: 3,
                    72: 2,
                    33: 2,
                    82: 2,
                    62: 2,
                    76: 3,
                    6: 3,
                    78: 2,
                    29: 2,
                    86: 2,
                    25: 3,
                    9: 2,
                    97: 3,
                },
                "computer science": {
                    81: 5,
                    77: 5,
                    96: 4,
                    31: 5,
                    0: 5,
                    1: 4,
                    100: 4,
                    3: 5,
                    8: 5,
                    61: 5,
                    27: 4,
                    14: 5,
                    73: 5,
                    11: 5,
                    7: 4,
                    17: 5,
                    65: 5,
                    28: 5,
                    88: 5,
                    42: 5,
                    51: 3,
                    70: 4,
                    85: 5,
                    53: 5,
                    69: 5,
                    39: 5,
                    91: 5,
                    45: 5,
                    50: 4,
                    23: 4,
                    57: 5,
                    24: 5,
                    92: 4,
                    5: 3,
                    12: 4,
                    21: 5,
                    18: 3,
                    84: 3,
                    74: 4,
                    35: 5,
                    56: 3,
                    4: 4,
                    64: 2,
                    99: 5,
                    30: 2,
                    36: 4,
                    48: 3,
                    94: 3,
                    60: 2,
                    13: 3,
                    40: 3,
                    19: 4,
                    79: 4,
                    43: 2,
                    87: 3,
                    89: 4,
                    66: 4,
                    95: 5,
                    98: 3,
                    37: 3,
                    15: 2,
                    34: 3,
                    26: 3,
                    32: 4,
                    10: 2,
                    44: 3,
                    47: 2,
                    83: 4,
                    41: 4,
                    2: 2,
                    63: 3,
                    59: 3,
                    75: 2,
                    22: 3,
                    58: 4,
                    49: 5,
                    68: 2,
                    67: 3,
                    54: 4,
                    90: 3,
                    46: 4,
                    38: 2,
                    71: 3,
                    55: 2,
                    20: 2,
                    52: 2,
                    93: 2,
                    16: 4,
                    80: 3,
                    72: 2,
                    33: 2,
                    82: 2,
                    62: 4,
                    76: 3,
                    6: 2,
                    78: 2,
                    29: 3,
                    86: 2,
                    25: 2,
                    9: 3,
                    97: 2,
                },
                "average": {
                    81: 5.0,
                    77: 5.0,
                    96: 4.666666666666667,
                    31: 4.666666666666667,
                    0: 4.666666666666667,
                    1: 4.666666666666667,
                    100: 4.666666666666667,
                    3: 4.666666666666667,
                    8: 4.666666666666667,
                    61: 4.333333333333333,
                    27: 4.333333333333333,
                    14: 4.333333333333333,
                    73: 4.333333333333333,
                    11: 4.333333333333333,
                    7: 4.333333333333333,
                    17: 4.333333333333333,
                    65: 4.333333333333333,
                    28: 4.333333333333333,
                    88: 4.333333333333333,
                    42: 4.333333333333333,
                    51: 4.0,
                    70: 4.0,
                    85: 4.0,
                    53: 4.0,
                    69: 4.0,
                    39: 4.0,
                    91: 4.0,
                    45: 4.0,
                    50: 4.0,
                    23: 4.0,
                    57: 4.0,
                    24: 4.0,
                    92: 4.0,
                    5: 4.0,
                    12: 4.0,
                    21: 4.0,
                    18: 4.0,
                    84: 4.0,
                    74: 4.0,
                    35: 4.0,
                    56: 4.0,
                    4: 3.6666666666666665,
                    64: 3.6666666666666665,
                    99: 3.6666666666666665,
                    30: 3.6666666666666665,
                    36: 3.6666666666666665,
                    48: 3.6666666666666665,
                    94: 3.6666666666666665,
                    60: 3.6666666666666665,
                    13: 3.6666666666666665,
                    40: 3.6666666666666665,
                    19: 3.6666666666666665,
                    79: 3.6666666666666665,
                    43: 3.6666666666666665,
                    87: 3.6666666666666665,
                    89: 3.6666666666666665,
                    66: 3.6666666666666665,
                    95: 3.3333333333333335,
                    98: 3.3333333333333335,
                    37: 3.3333333333333335,
                    15: 3.3333333333333335,
                    34: 3.3333333333333335,
                    26: 3.3333333333333335,
                    32: 3.3333333333333335,
                    10: 3.3333333333333335,
                    44: 3.3333333333333335,
                    47: 3.3333333333333335,
                    83: 3.3333333333333335,
                    41: 3.3333333333333335,
                    2: 3.3333333333333335,
                    63: 3.3333333333333335,
                    59: 3.3333333333333335,
                    75: 3.3333333333333335,
                    22: 3.0,
                    58: 3.0,
                    49: 3.0,
                    68: 3.0,
                    67: 3.0,
                    54: 3.0,
                    90: 3.0,
                    46: 3.0,
                    38: 3.0,
                    71: 3.0,
                    55: 3.0,
                    20: 3.0,
                    52: 3.0,
                    93: 3.0,
                    16: 2.6666666666666665,
                    80: 2.6666666666666665,
                    72: 2.6666666666666665,
                    33: 2.6666666666666665,
                    82: 2.6666666666666665,
                    62: 2.6666666666666665,
                    76: 2.6666666666666665,
                    6: 2.6666666666666665,
                    78: 2.6666666666666665,
                    29: 2.6666666666666665,
                    86: 2.3333333333333335,
                    25: 2.3333333333333335,
                    9: 2.3333333333333335,
                    97: 2.3333333333333335,
                },
            }
        ),
        "a lot of students",
    ),
]

i_test_data = [
    (
        "0 10\n10 0\n",
        "         x   y\n"
        "6262     9   0\n"
        "59060   10   4\n"
        "69882   10   5\n"
        "72739    0   0\n"
        "120951   3   1\n"
        "137931   9  10\n"
        "183595   7   0\n"
        "194157   0   9\n"
        "219910   0   3\n"
        "220920  10   0\n"
        "242318   8   4\n"
        "283651   1   8\n"
        "292990   4   3\n"
        "294474   6   3\n"
        "352959  10  10\n"
        "393223   3   5\n"
        "423449   1   2\n",
        "first open test",
    ),
    (
        "10 3\n3 12\n",
        "         x   y\n"
        "59060   10   4\n"
        "69882   10   5\n"
        "137931   9  10\n"
        "227545   8  11\n"
        "238425   8  12\n"
        "242318   8   4\n"
        "292990   4   3\n"
        "294474   6   3\n"
        "352959  10  10\n"
        "367498   3  11\n"
        "393223   3   5\n"
        "415763   6  12\n",
        "reversed first test",
    ),
    (
        "-122 -3\n-3 -2\n",
        "          x  y\n"
        "56231  -101 -2\n"
        "137164  -82 -2\n"
        "173626 -114 -3\n"
        "184658  -51 -3\n"
        "216741  -10 -2\n"
        "231623  -83 -3\n"
        "239450  -35 -2\n"
        "254204 -108 -3\n"
        "277714 -120 -3\n"
        "284071  -74 -2\n"
        "313516 -119 -3\n"
        "345711  -15 -3\n"
        "372023 -110 -2\n"
        "379899  -95 -2\n"
        "409405 -107 -2\n"
        "415504  -72 -3\n"
        "422652  -37 -2\n"
        "423454  -57 -3\n",
        "negative values",
    ),
    (
        "-122 0\n-3 0\n",
        "          x  y\n"
        "8378    -44  0\n"
        "8990    -99  0\n"
        "29497   -71  0\n"
        "37570   -56  0\n"
        "66829   -68  0\n"
        "101938  -12  0\n"
        "139929  -64  0\n"
        "169432  -76  0\n"
        "184238  -48  0\n"
        "192372 -101  0\n"
        "213542  -60  0\n"
        "221542  -45  0\n"
        "235431  -30  0\n"
        "294639  -41  0\n"
        "302081  -39  0\n"
        "316788  -11  0\n"
        "346784  -78  0\n"
        "390114  -75  0\n"
        "404853  -47  0\n",
        "negative x zero y",
    ),
    (
        "800 0\n670 0\n",
        "          x  y\n"
        "3388    753  0\n"
        "14502   720  0\n"
        "43673   708  0\n"
        "49735   776  0\n"
        "69247   799  0\n"
        "69888   744  0\n"
        "102168  684  0\n"
        "104942  800  0\n"
        "113017  747  0\n"
        "124296  714  0\n"
        "139516  687  0\n"
        "145504  755  0\n"
        "157196  763  0\n"
        "177187  690  0\n"
        "213191  691  0\n"
        "230559  767  0\n"
        "242343  679  0\n"
        "253161  742  0\n"
        "267880  770  0\n"
        "308343  725  0\n"
        "311290  773  0\n"
        "337718  713  0\n"
        "346406  673  0\n"
        "393227  737  0\n"
        "421807  780  0\n",
        "positive x zero y",
    ),
    (
        "0 -500\n0 -250\n",
        "        x    y\n"
        "24738   0 -345\n"
        "27143   0 -280\n"
        "30076   0 -426\n"
        "55969   0 -432\n"
        "63693   0 -448\n"
        "78395   0 -455\n"
        "82461   0 -300\n"
        "85447   0 -446\n"
        "87835   0 -381\n"
        "91811   0 -389\n"
        "117435  0 -395\n"
        "121414  0 -403\n"
        "122862  0 -476\n"
        "130853  0 -329\n"
        "140340  0 -255\n"
        "152624  0 -490\n"
        "160700  0 -343\n"
        "162188  0 -416\n"
        "167674  0 -497\n"
        "175604  0 -350\n"
        "192115  0 -430\n"
        "193061  0 -292\n"
        "196019  0 -438\n"
        "206970  0 -437\n"
        "214662  0 -453\n"
        "218774  0 -298\n"
        "229467  0 -460\n"
        "234954  0 -378\n"
        "258961  0 -474\n"
        "264637  0 -392\n"
        "267094  0 -327\n"
        "270070  0 -473\n"
        "287519  0 -252\n"
        "294305  0 -406\n"
        "295250  0 -268\n"
        "296724  0 -341\n"
        "302072  0 -422\n"
        "303585  0 -495\n"
        "306251  0 -267\n"
        "310156  0 -275\n"
        "316985  0 -429\n"
        "324152  0 -420\n"
        "330565  0 -363\n"
        "354732  0 -296\n"
        "361643  0 -450\n"
        "384270  0 -310\n"
        "402254  0 -463\n"
        "404721  0 -398\n"
        "423460  0 -250\n"
        "424725  0 -486\n",
        "zero x negative y",
    ),
    (
        "0 50\n0 250\n",
        "        x    y\n"
        "4289    0  117\n"
        "19944   0  248\n"
        "33807   0  103\n"
        "48714   0   96\n"
        "49673   0  234\n"
        "52656   0   88\n"
        "71273   0   73\n"
        "75316   0  228\n"
        "79181   0  220\n"
        "111698  0   60\n"
        "119743  0  207\n"
        "123651  0  199\n"
        "134585  0  200\n"
        "150906  0  120\n"
        "153407  0  185\n"
        "188713  0   90\n"
        "198231  0  164\n"
        "211624  0  230\n"
        "213105  0  157\n"
        "252049  0  217\n"
        "259777  0  201\n"
        "266943  0  210\n"
        "289569  0  187\n"
        "294888  0  106\n"
        "301888  0  115\n"
        "305896  0  107\n"
        "309786  0   99\n"
        "315335  0  181\n"
        "319229  0  173\n"
        "324747  0   92\n"
        "347493  0  232\n"
        "350459  0   86\n"
        "354374  0   78\n"
        "365337  0   79\n"
        "373317  0  226\n"
        "377141  0  218\n"
        "397409  0  130\n"
        "410833  0  196\n"
        "432735  0  198\n",
        "zero x positive y",
    ),
    (
        "1 0\n0 1\n",
        "       x  y\n" "72739  0  0\n",
        "small border",
    ),
]

j_test_data = [
    (
        (lambda x: x**2 + 2 * x + 1, -1.5, 1.7, 0.1),
        pd.Series(
            np.vectorize(lambda x: x**2 + 2 * x + 1)(
                np.arange(-1.5, 1.8, 0.1)
            ),
            index=np.arange(-1.5, 1.8, 0.1),
        ),
        (-0.9999999999999996, 1.7000000000000028),
        "first open test",
    ),
    (
        (lambda x: math.cos(x), 1000000.0, 10000000.0, 1000.0),
        pd.Series(
            np.vectorize(lambda x: math.cos(x))(
                np.arange(1000000.0, 10001000.0, 1000.0)
            ),
            index=np.arange(1000000.0, 10001000.0, 1000.0),
        ),
        (7819000.0, 7293000.0),
        "big nums",
    ),
    (
        (lambda x: x / x**3 - 1 / 3 * x, 10.0, 10.0**6, 100.0),
        pd.Series(
            np.vectorize(lambda x: x / x**3 - 1 / 3 * x)(
                np.arange(10.0, 10.0**6 + 100, 100.0)
            ),
            index=np.arange(10.0, 10.0**6 + 100, 100.0),
        ),
        (1000010.0, 10.0),
        "big series",
    ),
    (
        (lambda x: 1 / (1 + math.e ** (-x)), -2.12, 0.0, 0.01),
        pd.Series(
            np.vectorize(lambda x: 1 / (1 + math.e ** (-x)))(
                np.arange(-2.12, 0.01, 0.01)
            ),
            index=np.arange(-2.12, 0.01, 0.01),
        ),
        (-2.12, -4.529709940470639e-14),
        "small negative values",
    ),
    (
        (lambda x: math.log(1 + math.e**x), 0.1, 0.29, 0.003),
        pd.Series(
            np.vectorize(lambda x: math.log(1 + math.e**x))(
                np.arange(0.1, 0.293, 0.003)
            ),
            index=np.arange(0.1, 0.293, 0.003),
        ),
        (0.1, 0.29200000000000015),
        "small positive values",
    ),
]
